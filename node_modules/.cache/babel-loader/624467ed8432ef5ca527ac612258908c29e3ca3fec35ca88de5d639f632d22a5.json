{"ast":null,"code":"var _jsxFileName = \"/Users/workalexandr/Documents/GitHub/-Skill_base_app/src/WindRose.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { RadarChart, PolarGrid, PolarAngleAxis, Radar } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateWindRoseSize = skills => {\n  return skills.length * 50;\n};\nconst WindRose = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [skillsData, setSkillsData] = useState([]);\n  useEffect(() => {\n    const updateSkillsData = () => {\n      // Update the skillsData state based on the data prop (todos)\n      // You can modify this function according to your needs\n      const skills = data.map(todo => ({\n        skill: todo.skill,\n        value: todo.completed ? 100 : 0\n      }));\n      setSkillsData(skills);\n    };\n    updateSkillsData();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Wind Rose\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), \"const size = calculateWindRoseSize(skillsData.length === 0 ? defaultSkills : skillsData);\", /*#__PURE__*/_jsxDEV(RadarChart, {\n      cx: size / 2,\n      cy: size / 2,\n      outerRadius: size / 4,\n      width: size,\n      height: size,\n      data: skillsData.length === 0 ? defaultSkills : skillsData,\n      children: [/*#__PURE__*/_jsxDEV(PolarGrid, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n        dataKey: \"skill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Radar, {\n        name: \"Skills\",\n        dataKey: \"value\",\n        stroke: \"#8884d8\",\n        fill: \"#8884d8\",\n        fillOpacity: 0.6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(WindRose, \"aKjQ7YIZ4BP6lrDIMmE5kCTmyto=\");\n_c = WindRose;\nexport default WindRose;\nvar _c;\n$RefreshReg$(_c, \"WindRose\");","map":{"version":3,"names":["React","useState","useEffect","RadarChart","PolarGrid","PolarAngleAxis","Radar","jsxDEV","_jsxDEV","calculateWindRoseSize","skills","length","WindRose","_ref","_s","data","skillsData","setSkillsData","updateSkillsData","map","todo","skill","value","completed","children","fileName","_jsxFileName","lineNumber","columnNumber","cx","size","cy","outerRadius","width","height","defaultSkills","dataKey","name","stroke","fill","fillOpacity","_c","$RefreshReg$"],"sources":["/Users/workalexandr/Documents/GitHub/-Skill_base_app/src/WindRose.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { RadarChart, PolarGrid, PolarAngleAxis, Radar } from 'recharts';\n\nconst calculateWindRoseSize = (skills) => {\n  return skills.length * 50;\n};\n\n\nconst WindRose = ({ data }) => {\n  const [skillsData, setSkillsData] = useState([]);\n\n  useEffect(() => {\n    const updateSkillsData = () => {\n      // Update the skillsData state based on the data prop (todos)\n      // You can modify this function according to your needs\n      const skills = data.map((todo) => ({\n        skill: todo.skill,\n        value: todo.completed ? 100 : 0\n      }));\n      setSkillsData(skills);\n    };\n\n    updateSkillsData();\n  }, [data]);\n\n  return (\n    <div>\n      <h2>Wind Rose</h2>\n      const size = calculateWindRoseSize(skillsData.length === 0 ? defaultSkills : skillsData);\n\n<RadarChart\n  cx={size / 2}\n  cy={size / 2}\n  outerRadius={size / 4}\n  width={size}\n  height={size}\n  data={skillsData.length === 0 ? defaultSkills : skillsData}\n>\n        <PolarGrid />\n        <PolarAngleAxis dataKey=\"skill\" />\n        <Radar\n          name=\"Skills\"\n          dataKey=\"value\"\n          stroke=\"#8884d8\"\n          fill=\"#8884d8\"\n          fillOpacity={0.6}\n        />\n      </RadarChart>\n    </div>\n  );\n};\n\nexport default WindRose;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,SAAS,EAAEC,cAAc,EAAEC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,MAAMC,qBAAqB,GAAIC,MAAM,IAAK;EACxC,OAAOA,MAAM,CAACC,MAAM,GAAG,EAAE;AAC3B,CAAC;AAGD,MAAMC,QAAQ,GAAGC,IAAA,IAAc;EAAAC,EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC,GAAAF,IAAA;EACxB,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMgB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B;MACA;MACA,MAAMR,MAAM,GAAGK,IAAI,CAACI,GAAG,CAAEC,IAAI,KAAM;QACjCC,KAAK,EAAED,IAAI,CAACC,KAAK;QACjBC,KAAK,EAAEF,IAAI,CAACG,SAAS,GAAG,GAAG,GAAG;MAChC,CAAC,CAAC,CAAC;MACHN,aAAa,CAACP,MAAM,CAAC;IACvB,CAAC;IAEDQ,gBAAgB,EAAE;EACpB,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EAEV,oBACEP,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,6FAGxB,eAAApB,OAAA,CAACL,UAAU;MACT0B,EAAE,EAAEC,IAAI,GAAG,CAAE;MACbC,EAAE,EAAED,IAAI,GAAG,CAAE;MACbE,WAAW,EAAEF,IAAI,GAAG,CAAE;MACtBG,KAAK,EAAEH,IAAK;MACZI,MAAM,EAAEJ,IAAK;MACbf,IAAI,EAAEC,UAAU,CAACL,MAAM,KAAK,CAAC,GAAGwB,aAAa,GAAGnB,UAAW;MAAAQ,QAAA,gBAErDhB,OAAA,CAACJ,SAAS;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACbpB,OAAA,CAACH,cAAc;QAAC+B,OAAO,EAAC;MAAO;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAClCpB,OAAA,CAACF,KAAK;QACJ+B,IAAI,EAAC,QAAQ;QACbD,OAAO,EAAC,OAAO;QACfE,MAAM,EAAC,SAAS;QAChBC,IAAI,EAAC,SAAS;QACdC,WAAW,EAAE;MAAI;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACT;AAEV,CAAC;AAACd,EAAA,CA1CIF,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AA4Cd,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}